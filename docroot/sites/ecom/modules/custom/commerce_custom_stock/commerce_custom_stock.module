<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Form\ViewsForm;
use Drupal\Component\Utility\Tags;
use Drupal\commerce_price\Price;

/**
 * Implements hook_form_alter().
 */
function commerce_custom_stock_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->getFormObject() instanceof ViewsForm) {
    /** @var \Drupal\views\ViewExecutable $view */
    $view = reset($form_state->getBuildInfo()['args']);
    $tags = Tags::explode($view->storage->get('tag'));
    // Only add the Checkout button if the cart form view has order items.
    if (in_array('commerce_cart_form', $tags, TRUE) && !empty($view->result)) {
      $form['actions']['checkout']['#validate'] = array_merge($form['#validate'],
       ['commerce_custom_stock_order_item_views_form_submit']);
       $form['actions']['checkout']['#update_cart'] = FALSE;
      //  @toDo, Uncomment below to show minimum order amount message on cart load.
      // if (!commerce_custom_is_valid_order($form['actions']['checkout']['#order_id'], $form_state)) {
      //   $form['actions']['checkout']['#attributes']['disabled'] = 'disabled';
      // }
    }
  }
}

/**
 * Submit handler used to redirect to the checkout page.
 */
function commerce_custom_stock_order_item_views_form_submit($form,
FormStateInterface $form_state) {
  return commerce_custom_stock_check_availability($form_state->getTriggeringElement()['#order_id'], $form_state);
}

/**
 * Check if an order is valid in terms of minimum and maximum settings.
 */
function commerce_custom_is_valid_order($order_id, &$form_state, $set_message = TRUE) {
  $order_total_summary = \Drupal::service('commerce_order.order_total_summary');
  $cartConfig = \Drupal::config('commerce_custom_stock.cart.settings');
  $order = \Drupal::entityTypeManager()
    ->getStorage('commerce_order')->load($order_id);
  $totals = $order_total_summary->buildTotals($order);
  $minimum_quantity = $cartConfig->get('mininum_cart_value');
  $currency_code = $cartConfig->get('currency_code') ?: "USD";
  $currency_formatter = \Drupal::service('commerce_price.currency_formatter');
  $price = new Price($minimum_quantity, $currency_code);
  $formatted_price = $currency_formatter->format($price->getNumber(), $price->getCurrencyCode());

  if ($totals['subtotal']->getNumber() < $minimum_quantity) {
    if ($set_message) {
      \Drupal::messenger()->addError(t('Minimum order amount is
       @minimum_quantity.', ['@minimum_quantity' => $formatted_price]));
    }
    else {
      $form_state->setErrorByName('order', t('Minimum order amount is
       @minimum_quantity.', ['@minimum_quantity' => $formatted_price]));
    }

    return FALSE;
  }

  return TRUE;
}

/**
 * Check if Stock is less than minimum quantity.
 */
function commerce_custom_stock_check_availability($order_id, &$form_state) {
  $order = \Drupal::entityTypeManager()
    ->getStorage('commerce_order')->load($order_id);
  
  $quantities = $form_state->getValue("edit_quantity");
  $route_name = \Drupal::routeMatch()->getRouteName();

  foreach ($order->getItems() as $key => $order_item) {
    $entity = $order_item->getPurchasedEntity();
    $quantity = (int) $quantities[$key];
    $stock_val = (int) $entity->field_stock->value;

    if ($stock_val < $quantity) {
      $form_state->setErrorByName('edit_quantity][' . $key, t('This product is out of stock.'));
      return FALSE;
    }
    if ($route_name == 'commerce_cart.page' && $quantity > $stock_val) {
      $form_state->setErrorByName('edit_quantity][' . $key, t('The quantity is more than the stock quantity'));
      return FALSE;
    }
  }
}
