<?php

/**
 * @file
 * Primary module hooks for Campbell Common module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_theme().
 */
function campbell_common_theme($existing, $type, $theme, $path) {
  return [
    'taxonomy_terms_view' => [
      'variables' => [
        'welded_chain' => NULL,
        'forged_fittings' => NULL,
        'cable_and_wire_rope' => NULL,
        'weldless_chain' => NULL,
        'hobby_craft_and_deco' => NULL,
        'assemblies' => NULL,
        'overhead_lifting' => NULL,
        'lifting_clamps' => NULL,
        'blocks' => NULL,
        'accessories' => NULL,
        'pre_cut_packaged' => NULL,
        'chain_and_cable_cutters' => NULL,
        'featuredblock' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_views_pre_view().
 *
 * Adding Year exposed filters in view.
 */
function campbell_common_views_pre_view($view, $display_id) {
  if ($view->id() == 'campbell_news') {
    $ops = $view->display_handler->getOption('filters');
    $years = [];
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    // Getting nids with conditions.
    $query = $node_storage->getQuery()
      ->condition('type', 'news')
      ->condition('field_date', NULL, 'IS NOT NULL')
      ->condition('field_news_type', $display_id == 'campbell_news_release' ?
        'newsrelease' : 'inthenews', '=');
    $nodes = $node_storage->loadMultiple($query->execute());
    foreach ($nodes as $node) {
      $event_date = $node->get('field_date')->getValue();
      $date = \DateTime::createFromFormat('Y-m-d', $event_date[0]['value']);
      $years[] = $date->format('Y');
    }
    // Removing duplicate values and sort them in descending order.
    $years = array_unique($years);
    rsort($years);

    $ops['field_date_value']['group_info']['group_items'] = [];
    foreach ($years as $year) {
      $ops['field_date_value']['group_info']['group_items'][] = [
        'title' => $year,
        'operator' => 'between',
        'value' => [
          'min' => $year . '-01-01',
          'max' => $year . '-12-31',
          'type' => 'date',
        ],
      ];
    }
    $view->display_handler->overrideOption('filters', $ops);
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 *
 * Adding long description as last element in Breadcrumb for products.
 */
function campbell_common_preprocess_breadcrumb(&$variables) {

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    // Check if the content type is "product".
    if ($node->getType() == 'product') {
      // Getting long description field value for products.
      $long_description_value = $node->get('field_long_description')->value;
      // Getting the last key of breadcrumb.
      $last_key = array_key_last($variables['breadcrumb']);
      // Setting the text value of last key of product's breadcrumb.
      $variables['breadcrumb'][$last_key]['text'] = $long_description_value;
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Setting 2nd and 3rd level category facets for child product categories.
 */
function campbell_common_node_presave(EntityInterface $entity) {
  if ($entity->bundle() !== 'product_category') {
    return;
  }

  $classification_id = $entity->get('field_classification_id')->getValue()[0]['value'];
  $classification_array = explode('_', $classification_id);

  if ($classification_array[0] !== 'W2' && $classification_array[0] !== 'W3') {
    return;
  }

  $term_ids = $entity->get('field_product_classifications')->getValue();
  if (empty($term_ids)) {
    return;
  }

  // Get the first term ID from the array of entity references.
  $first_term_id = reset($term_ids);
  $child_term_id = $first_term_id['target_id'] ?? NULL;

  $child_term = end(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($child_term_id));
  $term_classification_id = $child_term->get('field_classification_id')->getValue()[0]['value'];

  $parent_nid = \Drupal::entityQuery('node')
    ->condition('field_classification_id', $term_classification_id)
    ->range(0, 1)
    ->execute();
  if (!$parent_nid) {
    return;
  }

  $parent_node = \Drupal::entityTypeManager()->getStorage('node')->load(reset($parent_nid));
  $field_category_facets_value = $parent_node->get('field_category_facets')->getValue();
  $entity->set('field_category_facets', $field_category_facets_value);
}

/**
 * Implements hook_form_alter().
 */
function campbell_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (strpos($form_id, 'webform_submission_contact_us_') === 0) {
    $form['#prefix'] = '<div class="contact-title">Email us:</div>';
    $form['#suffix'] = '<div class="required-fields-contact"><span class="color-red">*</span>Required field.</div>';
    $form['actions']['reset']['#value'] = t('Clear Form');
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function campbell_common_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id !== 'views_exposed_form') {
    return;
  }

  $view = $form_state->getStorage('view');
  $view_id = $view['view']->id();

  switch ($view_id) {
    case 'campbell_news':
      // Override any option label.
      $form['field_date_value']['#options']['All'] = t('All');
      break;

    default:
      // Do nothing for other views.
      break;
  }

}
