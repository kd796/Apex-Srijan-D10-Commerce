<?php

/**
 * @file
 * Primary module hooks for Gearwrench Core module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Component\Utility\Html;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function gearwrench_core_theme() {
  $theme['block__country_switch'] = [
    'render element' => 'elements',
    'template' => 'block--country-switch',
    'base hook' => 'block'
  ];

  $theme['block__footer_navigation_block'] = [
    'render element' => 'elements',
    'template' => 'block--footer-navigation-block',
    'base hook' => 'block'
  ];

  $theme['block__header_search'] = [
    'render element' => 'elements',
    'template' => 'block--header-search',
    'base hook' => 'block'
  ];

  return $theme;
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function gearwrench_core_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'footer_navigation_block') {
    $plugin_css = Html::cleanCssIdentifier($variables['plugin_id']);
    $provider_css = Html::cleanCssIdentifier($variables['configuration']['provider']);
    $block_class = 'block-' . $plugin_css;

    // Figure out title ID and set aria-related attributes.
    $title_id = $variables['attributes']['id'] . '-footer';
    $variables['attributes']['role'] = 'navigation';
    $variables['attributes']['aria-label'] = $title_id;

    // Add wrapper class.
    $variables['wrapper_attributes']['class'][] = "{$block_class}__wrapper";

    // Track to convert attributes.
    $variables['#attribute_variables'][] = 'wrapper_attributes';
  }
}

/**
 * Implements hook_views_pre_build().
 */
function gearwrench_core_views_pre_build(ViewExecutable $view) {
  $id = $view->storage->id();
  $display = $view->current_display;
  if ($id === 'product_category_grid' && $display === 'top_level_items') {
    $parent_tids = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('product_classifications', 0, 1, FALSE);
    $parent_tids = array_column($parent_tids, 'tid');
    $table_mapping = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->getTableMapping();
    $field_classification_id_table = $table_mapping->getFieldTableName('field_classification_id');
    $field_classification_id_storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('taxonomy_term')['field_classification_id'];
    $field_classification_id_column = $table_mapping->getFieldColumnName($field_classification_id_storage_definitions, 'value');
    $connection = \Drupal::database();
    $classification_ids = $connection->select($field_classification_id_table, 'f')
      ->fields('f', [$field_classification_id_column])
      ->distinct(TRUE)
      ->condition('bundle', 'product_classifications')
      ->condition('entity_id', $parent_tids, 'IN')
      ->execute()->fetchCol();
    $view_args = [];
    $view_args[] = implode('+', $classification_ids);
    $view->args = $view_args;
  }
}
