<?php

/**
 * @file
 * Primary module hooks for the Apex Common module.
 *
 * @see apex_common_metatags_attachments_alter()
 */

use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Drupal\redirect\Entity\Redirect;

/**
 * Alter webform options by id.
 *
 * @param array $options
 *   An associative array of options.
 * @param array $element
 *   The webform element that the options is for.
 */
function apex_common_webform_options_state_province_names_alter(array &$options, array &$element): void {
  if (!empty($options)) {
    $options_to_remove = [
      'Federated States of Micronesia',
      'Alberta',
      'British Columbia',
      'Manitoba',
      'New Brunswick',
      'Newfoundland and Labrador',
      'Nova Scotia',
      'Northwest Territories',
      'Nunavut',
      'Ontario',
      'Prince Edward Island',
      'Quebec',
      'Saskatchewan',
      'Yukon'
    ];

    foreach ($options as $idx => $option) {
      if (in_array($idx, $options_to_remove)) {
        unset($options[$idx]);
      }
    }
  }
}

/**
 * Loads the default image for the site.
 *
 * @param bool $product_image
 *   Should we focus on loading the product default image?
 *
 * @return \Drupal\media\Entity\Media|null
 *   The image or nothing.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apex_common_load_default_image(bool $product_image = FALSE): ?Media {
  $image = NULL;

  if ($product_image === FALSE) {
    $image = apex_common_load_media_by_name('Default Image');
  }

  if (empty($image)) {
    // Next try the product default image.
    $image = apex_common_load_media_by_name('Product Default Image');
  }

  if (!empty($image)) {
    return array_shift($image);
  }

  return NULL;
}

/**
 * Load a media file by name.
 *
 * @param string $name
 *   The name of the media file.
 *
 * @return \Drupal\media\Entity\Media[]
 *   An array of media entities.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apex_common_load_media_by_name(string $name): array {
  $properties = [
    'name' => $name
  ];

  return apex_common_load_media_by_properties($properties);
}

/**
 * This helps load media entities by properties.
 *
 * Since these helpers were removed from Drupal for dumb reasons.
 *
 * @param array $properties
 *   The properties to search by.
 *
 * @return \Drupal\media\Entity\Media[]
 *   An array of media entities.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apex_common_load_media_by_properties(array $properties = []): array {
  $entity_type_repository = \Drupal::service('entity_type.repository');
  $entity_type_manager = \Drupal::entityTypeManager();

  /** @var \Drupal\media\MediaStorage $storage */
  $storage = $entity_type_manager->getStorage($entity_type_repository->getEntityTypeFromClass(Media::class));

  return $storage->loadByProperties($properties);
}

/**
 * Just loads nodes by type then resaves them.
 *
 * @param string $type
 *   The bundle name. Examples: product or page.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apex_common_resave_node_by_type(string $type) {
  /** @var \Drupal\node\NodeInterface[] $items */
  $items = apex_common_load_nodes_by_properties(['bundle' => $type]);

  foreach ($items as $item) {
    $item->save();
  }
}

/**
 * Loads nodes by properties.
 *
 * @param array $properties
 *   The properties to search by.
 *
 * @return array|\Drupal\node\NodeInterface[]
 *   An array of nodes.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apex_common_load_nodes_by_properties(array $properties): array {
  $entity_type_repository = \Drupal::service('entity_type.repository');
  $entity_type_manager = \Drupal::entityTypeManager();

  /** @var \Drupal\node\NodeStorage $storage */
  $storage = $entity_type_manager->getStorage($entity_type_repository->getEntityTypeFromClass(Node::class));

  return $storage->loadByProperties($properties);
}

/**
 * Get the featured page.
 *
 * Gets the featured page for the current site by checking for a basic page or
 * landing page that has both the promote and sticky options checked at the same
 * time. This will allow more flexibility without adding a new field to config.
 *
 * This includes a fallback option for the old way of doing this.
 *
 * @return array|null
 *   The featured node in an array or NULL.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apex_common_get_featured_page(): ?array {
  $nodes = apex_common_load_nodes_by_properties(
    [
      'promote' => '1',
      'sticky' => 1,
      'type' => ['page', 'landing_page']
    ]
  );

  if (!empty($nodes)) {
    return $nodes;
  }

  // Fallback to the old, bad way to do this.
  $nodes = apex_common_load_nodes_by_properties(['title' => 'Featured Products']);

  if (!empty($nodes)) {
    return $nodes;
  }

  return NULL;
}

/**
 * Implements hook_metatags_attachments_alter().
 */
function apex_common_metatags_attachments_alter(array &$metatag_attachments): void {
  if (\Drupal::service('path.matcher')->isFrontPage() && !empty($metatag_attachments['#attached']['html_head'])) {
    foreach ($metatag_attachments['#attached']['html_head'] as $idx => $link) {
      // Remove "/home" from any hreflang metatags.
      if (stristr($link[1], 'hreflang_external') || $link[1] == 'hreflang_xdefault') {
        $href = str_ireplace('/home', '/', $link[0]['#attributes']['href']);
        $metatag_attachments['#attached']['html_head'][$idx][0]['#attributes']['href'] = $href;
      }
    }
  }
}

/**
 * Implements form_views_exposed_form_alter() to reset the view id max length and clear error.
 */
function apex_common_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');
  if ($form_id == 'views_exposed_form' && $view['view']->id() === 'product_category') {
    $form['field_product_specifications_target_id']['#maxlength'] = NULL;
  }
}

/**
 * Helper to add URL Redirects for 5xx or 4xx URLs.
 */
function apex_common_helper_add_url_redirects($entity, $redirect_path) {
  try {
    $source_path = trim(\Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $entity->id()), "/");
    $redirect = Redirect::create([
      'redirect_source' => $source_path,
      'redirect_redirect' => $redirect_path,
      'language' => 'en',
      'status_code' => '301',
    ]);
    $redirect->save();
  }
  catch (\Exception $exception) {
    \Drupal::logger('apex_common')->error($exception->getMessage());
  }
}

/**
 * Helper to remove default google tag types.
 */
function apex_common_helper_get_google_tag_get_types() {
  $config = \Drupal::config('google_tag.settings');
  $include_classes = $config->get('include_classes');
  return $include_classes ? ['data_layer', 'script'] : ['script'];
}

/**
 * Helper function to manupulate the script of google tag.
 */
function apex_common_helper_get_google_tag_inline_script($type, $config_key, $weight) {
  try {
    $func_name = 'apex_common_helper_get_google_tag_inline_script_' . $type . '_snippet';
    $contents = $func_name($config_key);
    $attachment = $contents ? [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => $contents,
      '#weight' => $weight,
    ],
      "google_tag_{$type}_tag",
    ] : [];
    return $attachment;
  }
  catch (\Exception $exception) {
    \Drupal::logger('apex_common')->error($exception->getMessage());
  }
}

/**
 * Helper function to add the script of google tag.
 */
function apex_common_helper_get_google_tag_inline_script_script_snippet($config_key) {
  $config = \Drupal::config('google_tag.settings');
  $compact = $config->get('compact_snippet');
  $container_id = apex_common_helper_gtm_variable_clean('container_id');
  $data_layer = apex_common_helper_gtm_variable_clean('data_layer');
  $query = apex_common_helper_gtm_environment_query();
  $script = <<<EOS
              if (Cookiebot.consent.statistics) {
                (function(w,d,s,l,i){
                  w[l]=w[l]||[];
                  w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});
                  var f=d.getElementsByTagName(s)[0];
                  var j=d.createElement(s);
                  var dl=l!='dataLayer'?'&l='+l:'';
                  j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl+'$query';
                  j.async=true;
                  f.parentNode.insertBefore(j,f);
                })(window,document,'script','$data_layer','$container_id');
              }
              else {
                  console.log("no cookiebot consent given")
              };
              EOS;
  if ($compact) {
    $script = str_replace(["\n", '  '], '', $script);
  }
  return $script;
}

/**
 * Helper function to clean up the google tag variables.
 */
function apex_common_helper_gtm_variable_clean($variable) {
  $config = \Drupal::config('google_tag.container.primary');
  return trim(json_encode($config->get($variable)), '"');
}

/**
 * Helper function to read the envirnoment variables of google tag config.
 */
function apex_common_helper_gtm_environment_query() {
  $config = \Drupal::config('google_tag.container.primary');
  if (!$config->get('include_environment')) {
    return '';
  }
  $environment_id = apex_common_helper_gtm_variable_clean('environment_id');
  $environment_token = apex_common_helper_gtm_variable_clean('environment_token');
  return "&gtm_auth=$environment_token&gtm_preview=$environment_id&gtm_cookies_win=x";
}
