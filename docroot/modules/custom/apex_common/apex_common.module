<?php

/**
 * @file
 * Primary module hooks for the Apex Common module.
 *
 * @see apex_common_metatags_attachments_alter()
 */

use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;

/**
 * Alter webform options by id.
 *
 * @param array $options
 *   An associative array of options.
 * @param array $element
 *   The webform element that the options is for.
 */
function apex_common_webform_options_state_province_names_alter(array &$options, array &$element): void {
  if (!empty($options)) {
    $options_to_remove = [
      'Federated States of Micronesia',
      'Alberta',
      'British Columbia',
      'Manitoba',
      'New Brunswick',
      'Newfoundland and Labrador',
      'Nova Scotia',
      'Northwest Territories',
      'Nunavut',
      'Ontario',
      'Prince Edward Island',
      'Quebec',
      'Saskatchewan',
      'Yukon'
    ];

    foreach ($options as $idx => $option) {
      if (in_array($idx, $options_to_remove)) {
        unset($options[$idx]);
      }
    }
  }
}

/**
 * Loads the default image for the site.
 *
 * @param bool $product_image
 *   Should we focus on loading the product default image?
 *
 * @return \Drupal\media\Entity\Media|null
 *   The image or nothing.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apex_common_load_default_image(bool $product_image = FALSE): ?Media {
  $image = NULL;

  if ($product_image === FALSE) {
    $image = apex_common_load_media_by_name('Default Image');
  }

  if (empty($image)) {
    // Next try the product default image.
    $image = apex_common_load_media_by_name('Product Default Image');
  }

  if (!empty($image)) {
    return array_shift($image);
  }

  return NULL;
}

/**
 * Load a media file by name.
 *
 * @param string $name
 *   The name of the media file.
 *
 * @return \Drupal\media\Entity\Media[]
 *   An array of media entities.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apex_common_load_media_by_name(string $name): array {
  $properties = [
    'name' => $name
  ];

  return apex_common_load_media_by_properties($properties);
}

/**
 * This helps load media entities by properties.
 *
 * Since these helpers were removed from Drupal for dumb reasons.
 *
 * @param array $properties
 *   The properties to search by.
 *
 * @return \Drupal\media\Entity\Media[]
 *   An array of media entities.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apex_common_load_media_by_properties(array $properties = []): array {
  $entity_type_repository = \Drupal::service('entity_type.repository');
  $entity_type_manager = \Drupal::entityTypeManager();

  /** @var \Drupal\media\MediaStorage $storage */
  $storage = $entity_type_manager->getStorage($entity_type_repository->getEntityTypeFromClass(Media::class));

  return $storage->loadByProperties($properties);
}

/**
 * Just loads nodes by type then resaves them.
 *
 * @param string $type
 *   The bundle name. Examples: product or page.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apex_common_resave_node_by_type(string $type) {
  /** @var \Drupal\node\NodeInterface[] $items */
  $items = apex_common_load_nodes_by_properties(['bundle' => $type]);

  foreach ($items as $item) {
    $item->save();
  }
}

/**
 * Loads nodes by properties.
 *
 * @param array $properties
 *   The properties to search by.
 *
 * @return array|\Drupal\node\NodeInterface[]
 *   An array of nodes.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apex_common_load_nodes_by_properties(array $properties): array {
  $entity_type_repository = \Drupal::service('entity_type.repository');
  $entity_type_manager = \Drupal::entityTypeManager();

  /** @var \Drupal\node\NodeStorage $storage */
  $storage = $entity_type_manager->getStorage($entity_type_repository->getEntityTypeFromClass(Node::class));

  return $storage->loadByProperties($properties);
}

/**
 * Get the featured page.
 *
 * Gets the featured page for the current site by checking for a basic page or
 * landing page that has both the promote and sticky options checked at the same
 * time. This will allow more flexibility without adding a new field to config.
 *
 * This includes a fallback option for the old way of doing this.
 *
 * @return array|null
 *   The featured node in an array or NULL.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apex_common_get_featured_page(): ?array {
  $nodes = apex_common_load_nodes_by_properties(
    [
      'promote' => '1',
      'sticky' => 1,
      'type' => ['page', 'landing_page']
    ]
  );

  if (!empty($nodes)) {
    return $nodes;
  }

  // Fallback to the old, bad way to do this.
  $nodes = apex_common_load_nodes_by_properties(['title' => 'Featured Products']);

  if (!empty($nodes)) {
    return $nodes;
  }

  return NULL;
}

/**
 * Implements hook_metatags_attachments_alter().
 */
function apex_common_metatags_attachments_alter(array &$metatag_attachments): void {
  if (\Drupal::service('path.matcher')->isFrontPage() && !empty($metatag_attachments['#attached']['html_head'])) {
    foreach ($metatag_attachments['#attached']['html_head'] as $idx => $link) {
      // Remove "/home" from any hreflang metatags.
      if (stristr($link[1], 'hreflang_external') || $link[1] == 'hreflang_xdefault') {
        $href = str_ireplace('/home', '/', $link[0]['#attributes']['href']);
        $metatag_attachments['#attached']['html_head'][$idx][0]['#attributes']['href'] = $href;
      }
    }
  }
}


/**
 * Implements hook_views_pre_view().
 *
 * Adding Year exposed filters in view.
 */
function apex_common_views_pre_view($view, $display_id) {
  if ($view->id() == 'brand_timeline') {
    $ops = $view->display_handler->getOption('filters');
    $years = [];
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    // Getting nids with conditions.
    $query = $node_storage->getQuery()
      ->condition('type', 'brand_timeline')
      ->condition('field_event_date', NULL, 'IS NOT NULL');
    $nodes = $node_storage->loadMultiple($query->execute());
    foreach ($nodes as $node) {
      $event_date = $node->get('field_event_date')->getValue();
      $date = \DateTime::createFromFormat('Y-m-d', $event_date[0]['value']);
      $years[] = $date->format('Y');
    }

    // Removing duplicate values and sort them in descending order.
    $years = array_unique($years);

    $ops['field_event_date_value']['group_info']['group_items'] = [];
    $decades = array();
    foreach ($years as $year) {
      $decade = floor($year / 10) * 10;
      $decades[] = $decade;
    }
    $decades = array_unique($decades);
    foreach ($decades as $decade) {
      $decade_str = strval($decade);
      $ops['field_event_date_value']['group_info']['group_items'][] = [
        'title' => $decade_str,
        'operator' => 'between',
        'value' => [
          'min' => $decade_str . '-01-01',
          'max' => $decade_str + 9 . '-12-31',
          'type' => 'date',
        ],
      ];
    }

    $view->display_handler->overrideOption('filters', $ops);
  }
}


/**
 * Implements form_views_exposed_form_alter() to reset the view id max length and clear error.
 */
function apex_common_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id !== 'views_exposed_form') {
    return;
  }

  $view = $form_state->getStorage('view');
  $view_id = $view['view']->id();

  switch ($view_id) {
    case 'product_category':
      $form['field_product_specifications_target_id']['#maxlength'] = NULL;
      break;

    case 'brand_timeline':
      // Start from initial year.
      $form['field_event_date_value']['#default_value'] = '0';
      // Remove any option.
      unset($form['field_event_date_value']['#options']['All']);
      break;

    default:
      // Do nothing for other views.
      break;
  }
}

