<?php

/**
 * @file
 * Contains at_migrations.module.
 */

use Drupal\migrate\MigrateSkipRowException;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Row;
use Drupal\Core\Entity\EntityInterface;
use Drupal\cleco_vuejs\Utils\StringHelper;
use Drupal\node\Entity\Node;

/**
 * @file
 * Primary module hooks for at_migrations module.
 */

/**
 * Implements hook_migrate_prepare_row().
 */
function at_migrations_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  // Atrribute ids considered for product soecification migration.
  if ($migration->id() === 'at_product_specifications' || $migration->id() === 'at_product_specifications_de'
    || $migration->id() === 'at_product_specifications_gb') {
    $attributes_to_include = [
    "ATT131",
    "ATT781",
    "ATT666982",
    "ATT666981",
    "ATT666970",
    "ATT728095",
    "ATT667216",
    "ATT675276",
    "ATT696024",
    "ATT675249",
    "ATT499",
    "asset.uploaded",
    "asset.extension",
    "asset.mime-type",
    "asset.compression",
    "asset.class",
    "asset.pixel-width",
    "asset.colorspace",
    "asset.profile",
    "asset.ydpi",
    "asset.format",
    "asset.pixel-height",
    "asset.width",
    "asset.height",
    "asset.depth",
    "asset.samples",
    "asset.colors",
    "asset.dsc-conformance",
    "asset.creator",
    "asset.filename",
    "asset.extra-samples",
    "asset.pages",
    "asset.preview-format",
    "asset.format-version",
    "ATT661955",
    "ATT667217",
    "ATT667214",
    "ATT666977",
    "ATT666973",
    "ATT666969",
    "ATT666984",
    "ATT666983",
    "ATT675268",
    "ATT675275",
    "ATT326",
    "ATT665735",
    "ATT675252",
    "ATT339",
    "ATT667215",
    "ATT672448",
    "ATT26835",
    "ATT675262",
    "ATT675272",
    "ATT728145",
    "ATT678997",
    "ATT675277",
    "ATT678998",
    "ATT675263",
    "ATT675265",
    "ATT728098",
    "ATT728101",
    "ATT675250",
    "ATT666305",
    "footnotes",
    "ATT667017",
    "ATT667014",
    "ATT667022",
    "ATT666186",
    "ATT666323",
    "ATT666296",
    "ATT667008",
    "ATT667020",
    "ATT666324",
    "ATT835",
    "ATT533",
    "ATT675356",
    "ATT666309",
    "ATT667223",
    "ATT667221",
    "ATT666136",
    "ATT667222",
    "ATT667000",
    "ATT660052",
    "ATT28147",
    "ATT28148",
    "ATT28581",
    "ATT584487",
    "ATT584486",
    "ATT661950",
    "ATT28572",
    "ATT660051",
    "ATT660049",
    "ATT28567",
    "ATT106",
    "ATT102",
    "ATT669754",
    "weightsap",
    "ATT241",
    "ATT668491",
    "ATT104",
    "set",
    "ATT420",
    "ATT103",
    "ATT728153",
    "ATT101",
    "ATT666187",
    "ATT105",
    "ATT669761",
    "ATT28568",
    "ATT100",
    "ATT919",
    "ATT669756",
    "ATT669755",
    "unitsofmeasure",
    "distchannel",
    "catalog number",
    "divcode",
    "baseunitofmeasure",
    "downloads",
    "spec_diagram",
    "currencycode",
    "salesorg",
    "ATT539",
    "brand",
    "listprice",
    "deliveryunit",
    "ATT425",
    "foreigntradecode",
    "sap_description",
    "customerprice",
    "ATT676136",
    "ATT107",
    "ATT675376",
    "ATT675267",
    "ATT675361",
    "ATT675266",
    "ATT675375",
    "ATT675264",
    "ATT675357",
    "ATT675251",
    "ATT675362",
    "ATT675366",
    "ATT675358",
    "ATT675359",
    "ATT15738",
    "ATT675369",
    "ATT675368",
    "ATT675367",
    "ATT675365",
    "ATT675364",
    "ATT675374",
    "ATT675247",
    "ATT675363",
    "ATT921",
    "ATT675274",
    "ATT675273",
    "table sort order",
    "ATT108",
    "ATT675270",
    "ATT675269",
    "ATT675395",
    "ATT675370",
    "ATT675372",
    "ATT675261",
    "ATT675246",
    "ATT180",
    "ATT675244",
    "ATT675371",
    "ATT675396",
    "ATT675243",
    "ATT675355",
    "ATT666190",
    "ATT666293",
    "ATT666308",
    "ATT664440",
    "ATT666329",
    "ATT666304",
    "ATT667030",
    "ATT667001",
    "ATT948",
    "ATT662",
    "ATT659133",
    "ATT415",
    "ATT584067",
    "ATT584375",
    "ATT659132",
    "ATT621",
    "ATT584377",
    "ATT667029",
    "ATT666142",
    "ATT666320",
    "ATT666176",
    "ATT666310",
    "ATT140",
    "ATT28570",
    "ATT666298",
    "ATT675248",
    "ATT675271",
    "ATT675245",
    "ATT666312",
    "ATT666311",
    "ATT666319",
    "ATT667004",
    "ATT667003",
    "ATT667002",
    "ATT667015",
    "ATT667021",
    "ATT667032",
    "ATT667031",
    "ATT666968",
    "ATT666967",
    "ATT344",
    "ATT675544",
    "ATT675545",
    "sap material status",
    "sap_sales_org_status",
    "pro landing body",
    "ATT666966",
    "ATT666965",
    "ATT667038",
    "ATT109",
    "ATT133",
    "ATT708",
    "ATT678995",
    "ATT675402",
    "ATT670138",
    "ATT667039",
    "ATT678745",
    "ATT678757",
    "ATT678840",
    "ATT678838",
    "ATT678833",
    "ATT666180",
    "ATT675405",
    "ATT675403",
    "ATT22562",
    "ATT27860",
    "ATT675542",
    "ATT675562",
    "ATT575",
    "ATT675404",
    "ATT666191",
    "ATT667125",
    "ATT17319",
    "ATT139",
    "ATT666192",
    "ATT666289",
    "ATT675543",
    "ATT666137",
    "ATT666300",
    "ATT666322",
    "ATT666316",
    "ATT666328",
    "ATT666292",
    "ATT666303",
    "ATT666302",
    "ATT666291",
    "ATT666294",
    "ATT666138",
    "ATT592",
    "ATT666986",
    "ATT667024",
    "ATT485",
    "ATT666988",
    "ATT666299",
    "ATT666318",
    "ATT667036",
    "ATT666175",
    "ATT666177",
    "ATT667033",
    "ATT666181",
    "ATT667007",
    "ATT666188",
    "ATT666325",
    "ATT666987",
    "ATT667025",
    "ATT325",
    "ATT669757",
    "ATT666315",
    "ATT666999",
    "ATT728154",
    "ATT728149",
    "ATT728148",
    "ATT728152",
    "ATT728147"
];

    if (!in_array(strtolower($row->getSource()['remote_term_id']), array_map('strtolower', $attributes_to_include))) {
      throw new MigrateSkipRowException('', TRUE);
    }

  }

  // Pass ID data to the Name on missing name data.
  if ($migration->id() === 'at_product_media' || $migration->id() === 'at_product_media_de'
    || $migration->id() === 'at_product_media_gb') {
    $name = $row->getSourceProperty('asset_name');
    $id = $row->getSourceProperty('asset_id');
    if (empty($name)) {
      $row->setSourceProperty('asset_name', $id);
    }
  }

}

/**
 * Implements hook_entity_presave().
 */
function at_migrations_entity_presave(EntityInterface $entity) {
  if ($entity instanceof Node && ($entity->bundle() == 'product' || $entity->bundle() == 'enhanced_product')) {
    $calculated_slug = '';
    if ($entity->hasField('field_long_description')) {
      $coupon_heading = !empty($entity->get('field_long_description')->getValue()[0]) ? $entity->get('field_long_description')->getValue()[0]['value'] : '';
      $calculated_slug = StringHelper::createSlug((string) $coupon_heading);
    }
    // If field_long_description is not available, use title as fallback.
    if (!$calculated_slug) {
      $calculated_slug = StringHelper::createSlug($entity->getTitle());
    }

    if (!$calculated_slug) {
      return;
    }

    $lang = $entity->language()->getId();
    // Check if we have any other product with same slug.
    $query = \Drupal::entityQuery('node')
      ->condition('field_slug', $calculated_slug, '=')
      ->condition('nid', $entity->id(), '!=')
      ->condition('langcode', $lang);
    $nids = $query->execute();
    $count = 1;
    $slug = $calculated_slug;
    // Loop until we have a unique value.
    while ($nids) {
      $slug = $calculated_slug . '-' . $count++;
      $query = \Drupal::entityQuery('node')
        ->condition('field_slug', $slug, '=')
        ->condition('nid', $entity->id(), '!=')
        ->condition('langcode', $lang);
      $nids = $query->execute();
    }
    $entity->set('field_slug', $slug);
  }
}
