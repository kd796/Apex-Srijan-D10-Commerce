<?php

/**
 * @file
 * Functions to support theming in the sata theme.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\File\Exception\FileException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\file\FileInterface;
use Drupal\media\Entity\Media;
use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;
use Drupal\node\NodeInterface;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;

include_once 'preprocess/block.preprocess.php';
include_once 'preprocess/media.preprocess.php';
include_once 'preprocess/node.preprocess.php';
include_once 'preprocess/paragraph.preprocess.php';
include_once 'preprocess/view.preprocess.php';

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function sata_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['logo_tagline'] = [
    '#type' => 'details',
    '#title' => t('Logo Tagline Image'),
    '#open' => TRUE,
    '#description' => t("Your logo tagline image settings."),
  ];

  $form['logo_tagline']['default_logo_tagline'] = [
    '#type' => 'checkbox',
    '#title' => t('Use the logo tagline supplied by the theme'),
    '#default_value' => theme_get_setting('logo_tagline.use_default'),
  ];

  $form['logo_tagline']['settings'] = [
    '#type' => 'container',
    '#states' => [
      // Hide the logo settings when using the default logo.
      'invisible' => [
        'input[name="default_logo_tagline"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['logo_tagline']['settings']['logo_tagline_path'] = [
    '#type' => 'textfield',
    '#title' => t('Path to custom logo tagline image'),
    '#default_value' => theme_get_setting('logo_tagline.path'),
  ];

  $form['logo_tagline']['settings']['logo_tagline_upload'] = [
    '#type' => 'file',
    '#title' => t('Upload logo tagline image.'),
    '#maxlength' => 40,
    '#description' => t("If you don't have direct file access to the server, use this field to upload your logo tagline."),
    '#upload_validators' => [
      'sata_file_validate_is_image' => [],
      'file_validate_extensions' => ['jpg jpeg gif png svg'],
    ],
  ];

  $element = &$form['logo_tagline']['settings']['logo_tagline_path'];
  $default = 'logo_tagline.svg';

  // If path is a public:// URI, display the path relative to the files
  // directory; stream wrappers are not end-user friendly.
  $original_path = $element['#default_value'];
  $friendly_path = NULL;

  if (StreamWrapperManager::getScheme($original_path) == 'public') {
    $friendly_path = StreamWrapperManager::getTarget($original_path);
    $element['#default_value'] = $friendly_path;
  }

  // Prepare local file path for description.
  if ($original_path && isset($friendly_path)) {
    $local_file = strtr($original_path, ['public:/' => PublicStream::basePath()]);
  }
  else {
    $local_file = \Drupal::service('theme.initialization')->getActiveThemeByName('sata')->getPath() . '/' . $default;
  }

  $element['#description'] = t('Examples: <code>@implicit-public-file</code> (for a file in the public filesystem), <code>@explicit-file</code>, or <code>@local-file</code>.', [
    '@implicit-public-file' => $friendly_path ?? $default,
    '@explicit-file' => StreamWrapperManager::getScheme($original_path) !== FALSE ? $original_path : 'public://' . $default,
    '@local-file' => $local_file,
  ]);

  $form['product_categories'] = [
    '#type' => 'details',
    '#title' => t('Product Categories'),
    '#open' => TRUE,
    '#description' => t("Your Product Category settings."),
  ];

  $form['product_categories']['enable_w1_grid'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Subcategory Grid on Level 1 (W1) category pages?'),
    '#default_value' => theme_get_setting('enable_w1_grid'),
  ];

  $form['price_spider'] = [
    '#type' => 'details',
    '#title' => t('Price Spider'),
    '#open' => TRUE,
    '#description' => t("Your Price Spider settings."),
  ];

  $form['price_spider']['price_spider_hide'] = [
    '#type' => 'checkbox',
    '#title' => t('Hide Price Spider?'),
    '#default_value' => theme_get_setting('price_spider_hide'),
  ];

  $form['price_spider']['price_spider_generic_key'] = [
    '#type' => 'textfield',
    '#title' => t('Generic Key'),
    '#default_value' => theme_get_setting('price_spider_generic_key'),
  ];

  $form['price_spider']['price_spider_product_key'] = [
    '#type' => 'textfield',
    '#title' => t('Product Key'),
    '#default_value' => theme_get_setting('price_spider_product_key'),
  ];

  $form['price_spider']['price_spider_country'] = [
    '#type' => 'textfield',
    '#title' => t('Country Code'),
    '#default_value' => theme_get_setting('price_spider_country'),
  ];

  $form['price_spider']['price_spider_language'] = [
    '#type' => 'textfield',
    '#title' => t('Language Code'),
    '#default_value' => theme_get_setting('price_spider_language'),
  ];

  $form['cookiebot'] = [
    '#type' => 'details',
    '#title' => t('Cookiebot'),
    '#open' => TRUE,
  ];

  $form['cookiebot']['cookiebot_cbid'] = [
    '#type' => 'textfield',
    '#title' => t('Cookiebot CBID'),
    '#default_value' => theme_get_setting('cookiebot_cbid'),
    '#description' => t("The 'data-cbid' property of the Cookiebot script in the site <head> tag. If empty, no Cookiebot script will be run."),
  ];

  $form['#validate'][] = 'sata_theme_settings_validate';
  $form['#submit'][] = 'sata_theme_settings_submit';
}

/**
 * Checks that the file is recognized as a valid image.
 *
 * @param \Drupal\file\FileInterface $file
 *   A file entity.
 *
 * @return array
 *   An empty array if the file is a valid image or an array containing an error
 *   message if it's not.
 *
 * @see hook_file_validate()
 */
function sata_file_validate_is_image(FileInterface $file) {
  $errors = [];

  $image_factory = \Drupal::service('image.factory');
  $image = $image_factory->get($file->getFileUri());

  if (!$image->isValid()) {
    // Now just check to see if this is an SVG file.
    if ($file->getMimeType() !== 'image/svg+xml') {
      $supported_extensions = $image_factory->getSupportedExtensions();
      $supported_extensions[] = 'svg';

      $errors[] = t('The image file is invalid or the image type is not allowed. Allowed types: %types', ['%types' => implode(', ', $supported_extensions)]);
    }
  }

  return $errors;
}

/**
 * Validates the settings so that we can upload files.
 *
 * @param array $form
 *   The form we are processing.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The state of the form as submitted.
 */
function sata_theme_settings_validate(array &$form, FormStateInterface $form_state) {
  // Check for a new uploaded logo.
  if (isset($form['logo_tagline'])) {
    $file = _file_save_upload_from_form($form['logo_tagline']['settings']['logo_tagline_upload'], $form_state, 0);

    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state->setValue('logo_tagline_upload', $file);
    }
  }

  // When intending to use the default logo, unset the logo_path.
  if ($form_state->getValue('default_logo_tagline')) {
    $form_state->unsetValue('logo_tagline_path');
  }

  // If the user provided a path for a logo or favicon file, make sure a file
  // exists at that path.
  if ($form_state->getValue('logo_tagline_path')) {
    $path = sata_validate_path($form_state->getValue('logo_tagline_path'));

    if (!$path) {
      $form_state->setErrorByName('logo_tagline_path', t('The custom logo path is invalid.'));
    }
  }
}

/**
 * Process the theme settings submit.
 *
 * @param array $form
 *   The form we are processing.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The state of the form as submitted.
 */
function sata_theme_settings_submit(array &$form, FormStateInterface &$form_state) {
  $config_key = $form_state->getValue('config_key');
  $config = \Drupal::service('config.factory')->getEditable($config_key);

  // Exclude unnecessary elements before saving.
  $form_state->cleanValues();
  $form_values = $form_state->getValues();
  $values = [];

  if (isset($form_values['logo_tagline_upload'])) {
    $values['logo_tagline_upload'] = $form_values['logo_tagline_upload'];
  }

  if (isset($form_values['logo_tagline_path'])) {
    $values['logo_tagline_path'] = $form_values['logo_tagline_path'];
  }

  if (isset($form_values['default_logo_tagline'])) {
    $values['default_logo_tagline'] = $form_values['default_logo_tagline'];
  }

  // If the user uploaded a new logo or favicon, save it to a permanent location
  // and use it in place of the default theme-provided file.
  $default_scheme = \Drupal::config('system.file')->get('default_scheme');

  try {
    if (!empty($values['logo_tagline_upload'])) {
      $filename = \Drupal::service('file_system')->copy($values['logo_tagline_upload']->getFileUri(), $default_scheme . '://');
      $values['default_logo_tagline'] = 0;
      $values['logo_tagline_path'] = $filename;
    }
  }
  catch (FileException $e) {
    // Ignore.
  }

  unset($values['logo_tagline_upload']);

  // If the user entered a path relative to the system files directory for
  // a logo or favicon, store a public:// URI so the theme system can handle it.
  if (!empty($values['logo_tagline_path'])) {
    $values['logo_tagline_path'] = sata_validate_path($values['logo_tagline_path']);
  }

  foreach ($values as $key => $value) {
    if ($key == 'default_logo_tagline') {
      $config->set('logo_tagline.use_default', $value);
    }
    elseif ($key == 'logo_tagline_path') {
      $config->set('logo_tagline.path', $value);
    }
    elseif ($key != 'logo_tagline_upload') {
      $config->set($key, $value);
    }
  }

  /** @var \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator */
  $file_url_generator = \Drupal::service('file_url_generator');

  // Generate the path to the logo image.
  if ($values['default_logo_tagline']) {
    $config->set('logo_tagline.url', sata_get_default_tagline());
  }
  elseif ($values['logo_tagline_path']) {
    $config->set('logo_tagline.url', $file_url_generator->generateString($values['logo_tagline_path']));
  }

  $config->save();

  $form_state->unsetValue('logo_tagline_upload');
  $form_state->unsetValue('logo_tagline_path');
  $form_state->unsetValue('default_logo_tagline');
}

/**
 * Helper function for the system_theme_settings form.
 *
 * Attempts to validate normal system paths, paths relative to the public files
 * directory, or stream wrapper URIs. If the given path is any of the above,
 * returns a valid path or URI that the theme system can display.
 *
 * @param string $path
 *   A path relative to the Drupal root or to the public files directory, or
 *   a stream wrapper URI.
 *
 * @return mixed
 *   A valid path that can be displayed through the theme system, or FALSE if
 *   the path could not be validated.
 */
function sata_validate_path($path) {
  // Absolute local file paths are invalid.
  if (\Drupal::service('file_system')->realpath($path) == $path) {
    return FALSE;
  }

  // A path relative to the Drupal root or a fully qualified URI is valid.
  if (is_file($path)) {
    return $path;
  }

  // Prepend 'public://' for relative file paths within public filesystem.
  if (StreamWrapperManager::getScheme($path) === FALSE) {
    $path = 'public://' . $path;
  }

  if (is_file($path)) {
    return $path;
  }

  return FALSE;
}

/**
 * Gets the default tagline.
 *
 * @return string
 *   The path to the default image.
 */
function sata_get_default_tagline(): string {
  return sata_get_theme_path() . '/icons/logo-tagline.svg';
}

/**
 * Get the path to the current SATA theme.
 *
 * @return string
 *   The path to the current SATA theme.
 */
function sata_get_theme_path(): string {
  /** @var Drupal\Core\Theme\ActiveTheme $active_theme */
  $active_theme = \Drupal::service('theme.initialization')->getActiveThemeByName('sata');

  return $active_theme->getPath();
}

/**
 * Implements hook_preprocess_html().
 */
function sata_preprocess_html(&$variables) {
  $priceSpiderHide = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'ps-hide',
      'content' => theme_get_setting('price_spider_hide'),
    ],
  ];

  $priceSpiderProductKey = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'ps-key',
      'content' => theme_get_setting('price_spider_product_key'),
    ],
  ];

  $priceSpiderGenericKey = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'ps-key',
      'content' => theme_get_setting('price_spider_generic_key'),
    ],
  ];

  $priceSpiderCountry = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'ps-country',
      'content' => theme_get_setting('price_spider_country'),
    ],
  ];

  $priceSpiderLanguage = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'ps-language',
      'content' => theme_get_setting('price_spider_language'),
    ],
  ];

  $variables['#attached']['html_head'][] = [$priceSpiderHide, 'ps-hide'];

  // If where buy checkbox checked use generic key, else product key.
  /** @var \Drupal\node\Entity\Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['#attached']['html_head'][] = [$priceSpiderProductKey, 'ps-key'];

  if (!empty($node) && $node->hasField('field_make_where_to_buy_page') && !empty($node->get('field_make_where_to_buy_page'))) {
    $fieldVal = $node->get('field_make_where_to_buy_page')->getValue();

    if (!empty($fieldVal[0]['value'])) {
      $makeWhereToBuyPageValue = $fieldVal[0]['value'];

      if ($makeWhereToBuyPageValue === '1') {
        $variables['#attached']['html_head'][] = [
          $priceSpiderGenericKey,
          'ps-key'
        ];
      }
    }
  }

  $variables['#attached']['html_head'][] = [$priceSpiderCountry, 'ps-country'];
  $variables['#attached']['html_head'][] = [$priceSpiderLanguage, 'ps-language'];

  // Add the class to hide the Price Spider elements throughout the website.
  if (theme_get_setting('price_spider_hide')) {
    $variables['attributes']['class'][] = 'price-spider-hide';
  }

  if (\Drupal::currentUser()->isAnonymous()
    && $cookiebot_cbid = theme_get_setting('cookiebot_cbid')) {
    $cookie_bot = [
      '#tag' => 'script',
      '#attributes' => [
        'id' => 'Cookiebot',
        'src' => 'https://consent.cookiebot.com/uc.js',
        'data-cbid' => $cookiebot_cbid,
        'data-blockingmode' => 'auto',
        'type' => 'text/javascript',
      ],
      '#weight' => -100,
    ];
    $variables['#attached']['html_head'][] = [$cookie_bot, 'cookiebot'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for search_block_form.
 */
function sata_form_search_block_form_alter(&$form, &$form_state) {
  $form['keys']['#attributes']['autocomplete'] = 'off';
  $form['keys']['#attributes']['placeholder'][] = t('Search');

  $form['actions']['submit'] = [
    '#type' => 'html_tag',
    '#tag' => 'button',
    '#value' => '<span>' . t('Search') . '</span>',
    '#attributes' => [
      'id' => 'edit-submit',
      'type' => 'submit',
      'class' => [
        'search-submit'
      ],
      'title' => t('Search'),
      'data-drupal-selector' => 'edit-submit',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for search_form.
 */
function sata_form_search_form_alter(&$form, &$form_state) {
  $form['basic']['keys']['#attributes']['autocomplete'] = 'off';
  $form['basic']['keys']['#attributes']['placeholder'][] = t('Search');
}

/**
 * Implements hook_theme_registry_alter().
 *
 * We're doing this to automatically convert passed-through attribute arrays
 * into Attribute objects.
 *
 * @see bazo_theme_registry_alter();
 * @see bazo_postprocess();
 */
function sata_theme_registry_alter(&$theme_registry) {
  $theme_keys = [
    'search_result',
  ];

  // Run through each theme id.
  foreach (array_keys($theme_registry) as $key) {
    // Attach post process if key or base_hook is in supported theme keys.
    if (in_array($key, $theme_keys) || (array_key_exists('base hook', $theme_registry[$key]) && in_array($theme_registry[$key]['base hook'], $theme_keys))) {
      // Add postprocess function to automatically convert attributes arrays.
      $theme_registry[$key]['preprocess functions'][] = 'bazo_postprocess';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for menu.
 */
function sata_theme_suggestions_menu_alter(array &$suggestions, array &$variables) {
  /*
   * Add hook suggestion based on block ID.
   * @see vmc_preprocess_block();
   */
  if (isset($variables['attributes']['data-block'])) {
    $id = $variables['attributes']['data-block'];
    unset($variables['attributes']['data-block']);
    $suggestions[] = $variables['theme_hook_original'] . '__block_' . $id;
  }

  if ($variables['menu_name'] === 'featured-tools') {
    $suggestions[] = $variables['theme_hook_original'] . '__block_' . $variables['menu_name'];
  }
}

/**
 * Implements hook_preprocess_blazy().
 */
function sata_preprocess_blazy(&$variables) {
  // @todo watch these tickets and remove this portion of the code when they're
  //   merged into core and we can properly batch-update/update alt tags.
  // @link https://www.drupal.org/project/drupal/issues/2983456
  // @link https://www.drupal.org/project/drupal/issues/2878119
  $entity = NULL;

  if (isset($variables['element']['#item']) && ($item = $variables['element']['#item']) && method_exists($item, 'getEntity')) {
    $entity = $item->getEntity();

    if ($entity instanceof Media) {
      $alt = $entity->getSource()->getMetadata($entity, 'thumbnail_alt_value');
      $variables['image']['#attributes']['alt'] = $alt;
      $variables['image']['#attributes']['loading'] = 'lazy';
      $variables['item_attributes']['alt'] = $alt;
    }
  }

  // Passing #item_attributes to blazy doesn't seem to actually work, so we pass
  // them through the settings and then reset them now.
  if (isset($variables['settings']['item_attributes']) && is_array($variables['settings']['item_attributes'])) {
    foreach ($variables['settings']['item_attributes'] as $attr_key => $attr_val) {
      $variables['image']['#attributes'][$attr_key] = $attr_val;
      $variables['item_attributes'][$attr_key] = $attr_val;
    }
  }

  // Try to override placeholder if default placeholder and image_style exists.
  if (isset($variables['settings']['image_style']) && isset($variables['image']['#uri']) && substr($variables['image']['#uri'], 0, 21) === 'data:image/gif;base64') {
    // Try to determine height and width of image based on image style.
    $image = \Drupal::service('image.factory')->get($variables['settings']['uri']);
    $image_dimensions['height'] = $image->getHeight();
    $image_dimensions['width'] = $image->getWidth();
    $image_dimensions = responsive_image_get_image_dimensions($variables['settings']['image_style'], $image_dimensions, $variables['settings']['uri']);
    $height = $image_dimensions['height'];
    $width = $image_dimensions['width'];

    // Override with aspect-ratio correct  placeholder if height/width found.
    if (!is_null($height) && !is_null($width)) {
      $variables['image']['#attributes']['height'] = $height;
      $variables['image']['#attributes']['width'] = $width;
      $variables['image']['#uri'] = "data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 {$width} {$height}'%3e%3c/svg%3e";
    }
  }

  // Set video iframe attributes for accessibility if they're known.
  if ($entity instanceof Media && $variables['settings']['type'] === 'video'
      && isset($variables['settings']['current_view_mode'])
      && $variables['settings']['current_view_mode'] === 'hero'
      && isset($variables['iframe_attributes'])
      && is_object($variables['iframe_attributes'])) {
    $variables['iframe_attributes']->setAttribute('title', $entity->label());
    $variables['iframe_attributes']->setAttribute('tabindex', '-1');
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function sata_preprocess_breadcrumb(&$variables) {
  // Unset if only 1 item is set (IE. Home or Current Page)
  if (count($variables['links']) < 2) {
    unset($variables['links'][0]);
    unset($variables['breadcrumb'][0]);
  }
}

/**
 * Implements hook_preprocess_hook() for menu, main, block-header-menu-main.
 */
function sata_preprocess_menu__main__block_header_menu_main(array &$variables) {
  // Basic attribute variables.
  $node_storage = Drupal::entityTypeManager()->getStorage('node');

  foreach (Element::children($variables['items']) as $delta) {
    $item = &$variables['items'][$delta];

    // Only render content if link is a MenuLinkContent plugin.
    if (isset($item['original_link']) && $item['original_link'] instanceof MenuLinkContent) {
      $nodes = apex_common_get_featured_page();

      if (!empty($nodes)) {
        $node = reset($nodes);

        // Get Node.
        if ($node instanceof NodeInterface && $node->hasField('field_media') && !$node->get('field_media')->isEmpty()) {
          $item['panel_image'] = $node->get('field_media')->view([
            'label' => 'hidden',
            'type' => 'blazy_media',
            'settings' => [
              'image_style' => 'medium_landscape_16x9',
            ]
          ]);

          unset($item['panel_image']['#theme']);
        }
      }
    }
  }

  // Generate Featured Tools Menu.
  $featured_tools_menu = NULL;
  $featured_tools_menu_name = 'featured-tools';
  $featured_tools_menu_tree = \Drupal::menuTree();
  $parameters = $featured_tools_menu_tree->getCurrentRouteMenuTreeParameters($featured_tools_menu_name);
  $parameters->setMinDepth(0);
  $parameters->onlyEnabledLinks();
  $featured_tools_tree = $featured_tools_menu_tree->load($featured_tools_menu_name, $parameters);

  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkNodeAccess'],
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];

  $featured_tools_tree = $featured_tools_menu_tree->transform($featured_tools_tree, $manipulators);
  $featured_tools_menu = $featured_tools_menu_tree->build($featured_tools_tree);

  if (!empty($featured_tools_tree)) {
    $variables['featured_tools'] = [
      '#markup' => \Drupal::service('renderer')->render($featured_tools_menu),
      '#cache' => [
        'contexts' => ['url'],
        'tags' => ['config:system.menu.' . $featured_tools_menu_name],
      ],
    ];
  }
  else {
    $variables['featured_tools'] = NULL;
  }
}

/**
 * Implements hook_preprocess_hook() for page.
 */
function sata_preprocess_page(array &$variables) {
  // Basic attribute variables.
  $variables['footer_attributes']['class'][] = 'region';

  if (isset($variables['node']) && is_object($variables['node'])) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $variables['node'];
    $contentType = $node->bundle();

    if ($contentType == 'landing_page') {
      unset($variables['page']['content']['sata_breadcrumbs']);
    }
  }
}

/**
 * Implements hook_preprocess_responsive_image().
 */
function sata_preprocess_responsive_image(&$variables) {
  // Blazy placeholder override.
  // @note: this is done here instead of in preprocess_blazy since height and
  // width is usually handled in template_responsive_image.
  if (substr($variables['img_element']['#uri'], 0, 21) === 'data:image/gif;base64') {
    // Try to determine height based on different parent key options.
    $height = NULL;
    $height_parent_options[] = ['height'];
    $height_parent_options[] = ['attributes', 'height'];
    $height_parent_options[] = ['img_element', '#attributes', 'height'];

    while (is_null($height) && current($height_parent_options)) {
      $height = NestedArray::getValue($variables, current($height_parent_options));
      next($height_parent_options);
    }

    // Try to determine width based on different parent key options.
    $width = NULL;
    $width_parent_options[] = ['width'];
    $width_parent_options[] = ['attributes', 'width'];
    $width_parent_options[] = ['img_element', '#attributes', 'width'];

    while (is_null($width) && current($width_parent_options)) {
      $width = NestedArray::getValue($variables, current($width_parent_options));
      next($width_parent_options);
    }

    // Calculate the height and width.
    if (is_null($height) || is_null($width)) {
      $image = \Drupal::service('image.factory')->get($variables['uri']);
      $image_dimensions['height'] = $image->getHeight();
      $image_dimensions['width'] = $image->getWidth();
      $responsive_image_style = ResponsiveImageStyle::load($variables['responsive_image_style_id']);
      $image_dimensions = responsive_image_get_image_dimensions($responsive_image_style->getFallbackImageStyle(), $image_dimensions, $variables['uri']);
      $height = $image_dimensions['height'];
      $width = $image_dimensions['width'];
    }

    // Override with aspect-ratio correct  placeholder if height/width found.
    if (!is_null($height) && !is_null($width)) {
      $variables['img_element']['#uri'] = "data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 {$width} {$height}'%3e%3c/svg%3e";

      // Set height and width if placeholder image is missing dimensions.
      if (!isset($variables['img_element']['#height'])) {
        $variables['img_element']['#height'] = $height;
      }
      if (!isset($variables['img_element']['#width'])) {
        $variables['img_element']['#width'] = $width;
      }
    }
  }
}

/**
 * Implements hook_preprocess_responsive_image_formatter().
 */
function sata_preprocess_responsive_image_formatter(&$variables) {
  if (!empty($variables['responsive_image']['#height']) && !empty($variables['responsive_image']['#width'])) {
    $variables['responsive_image']['#attributes']['height'] = $variables['responsive_image']['#height'];
    $variables['responsive_image']['#attributes']['width'] = $variables['responsive_image']['#width'];
  }

  // @todo watch these tickets and remove this portion of the code when they're
  //   merged into core and we can properly batch-update/update alt tags.
  // @link https://www.drupal.org/project/drupal/issues/2983456
  // @link https://www.drupal.org/project/drupal/issues/2878119

  /* @var \Drupal\image\Plugin\Field\FieldType\ImageItem $variables['item'] */
  $entity = $variables['item']->getEntity();

  if ($entity instanceof Media) {
    $alt = $entity->getSource()->getMetadata($entity, 'thumbnail_alt_value');
    $variables['responsive_image']['#attributes']['alt'] = $alt;
    $variables['item']->set('alt', $alt);
  }
}

/**
 * Implements accordion on forms.
 */
function sata_form_alter(&$form, &$form_state, $form_id) {
  $webform_id = isset($form['#webform_id']) ?? $form_id;

  switch ($webform_id) {
    case 'warranty_replacement_form':
      $form['#attached']['library'][] = 'sata/webform--warranty-replacement-form';
      break;

    default:
      break;
  }
}

/**
 * Implements preprocess_taxonomy_term().
 */
function sata_preprocess_taxonomy_term(array &$variables) {
  foreach ($variables['title_attributes']['class'] as $k => $v) {
    if ($v == 'visually-hidden') {
      unset($variables['title_attributes']['class'][$k]);
    }
  }
}

/**
 * Implements hook_js_alter().
 *
 * Ignore cookieconsent for all JS except those that set cookies.
 * - The HubSpot script sets cookies.
 * - The PriceSpider scripts may set cookies; don't ignore just in case.
 */
function sata_js_alter(&$js) {
  if (theme_get_setting('cookiebot_cbid')) {
    foreach ($js as $key => &$item) {
      if (
        strpos($key, 'pricespider.com') === FALSE
        && strpos($key, 'hs-scripts.com') === FALSE
      ) {
        $item['attributes']['data-cookieconsent'] = 'ignore';
      }
    }
  }
}
