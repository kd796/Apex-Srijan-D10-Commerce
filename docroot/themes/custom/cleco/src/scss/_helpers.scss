/*
 * MAP MULTIPLIER
 * Return a new map with values multiplied by the passed constant
 */
@function map-multiplier($map, $multiplier: 1) {
  $newmap: $map;

  @each $key, $value in $map {
    $item: ($key: $value * $multiplier);
    $newmap: map-merge($newmap, $item);
  }

  @return $newmap;
}

/**
 * MAP SET
 * Set the value of a map key to a new value
 */
@function map-set($map, $key, $value) {
  $new: ($key: $value);
  @return map-merge($map, $new);
}

/**
 * FIND/REPLACE
 * Find and replaces instances of a character within a string
 */
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/*
 * STRIP UNIT
 * Remove the units from a value
 */
@function strip-unit($number) {
  @if type-of($number)=="number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

/**
 * URL Encode
 */
@function urlencode($string) {
  $string: str-replace($string, "<", "%3C");
  $string: str-replace($string, ">", "%3E");
  $string: str-replace($string, '"', "'");
  $string: str-replace($string, "#", "%23");
  $string: str-replace($string, "&", "%26");

  @return $string;
}

/*
 * FLUID VALUE
 * Generate a viewport-relative calc function
 */
@function fluid-value($min, $max, $vmin, $vmax, $vunit: 1vw) {
  @return calc( #{$min} + (#{strip-unit($max)} - #{strip-unit($min)}) * (#{100 * $vunit} - #{$vmin}) / (#{strip-unit($vmax)} - #{strip-unit($vmin)}));
}

/**
 * SVG BACKGROUND
 * Turn an SVG string into a color-able background
 */
@function svg-background($svg, $fill: currentColor) {
  $svg: str-replace($svg, currentColor, $fill);

  @return "data:image/svg+xml," + urlencode($svg);
}

/**
 * SECTION PADDING VALUE
 */
@function section-padding-value($dimension: horizontal) {
  $map-key: $dimension;
  @if $dimension == left or $dimension == right {
    $map-key: horizontal
  } @else if $dimension == top or $dimension == bottom {
    $map-key: vertical;
  }

  $map: map-get($section-padding-map, $map-key);

  $vbase: 1vw;
  @if map-get($map, dimension) == height {
    $vbase: 1vh;
  }

  @return fluid-value(map-get($map, min), map-get($map, max), map-get($map, vmin), map-get($map, vmax), $vbase);
}
