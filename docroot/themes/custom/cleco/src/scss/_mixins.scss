@mixin clearfix() {
   &:before,
   &:after {
      content: "";
      display: table;
   }
   &:after {
      clear: both;
   }
   zoom: 1;
}
/**
 * FORCE WRAPPING
 * Force text to wrap, even if its intrinsic width is wider than its container
 */
@mixin force-wrapping {
  overflow-wrap: break-word;
  word-wrap: break-word;
  word-break: break-word;
  hyphens: auto;
}

/**
 * Truncate
 */
@mixin truncate {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

/**
 * Truncate
 */
@mixin imgtxt {
  overflow: hidden;
  text-indent: -9999em;
  white-space: nowrap;
}

/**
 * VISUALLY HIDDEN
 */
@mixin visually-hidden {
  position: absolute !important;
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
  width: 1px;
  word-wrap: normal;
}

/*
 * INPUT PLACEHOLDER
 * Alias to apply the same included content to each vendor-prefixed
 * input placeholder selector individually.
 */

@mixin input-placeholder {
  ::-webkit-input-placeholder {
    @content
  }

  ::-moz-placeholder {
    @content
  }

  :-ms-input-placeholder {
    @content;
  }

  ::placeholder {
    @content
  }
}

/**
 * BUTTON RESET
 * Reset button styles
 */
@mixin button-reset {
  appearance: none;
  margin: 0;
  padding: 0;
  border: 0;
  border-radius: 0;
  font: inherit;
  cursor: pointer;
  color: inherit;
  background: transparent;
  box-shadow: none;
}

/**
 * LINK RESET
 * Reset hyperlink styles
 */
@mixin link-reset {
  &:hover {
    box-shadow: none;
  }
}

/*
 * PROPERTY SCALE
 * Define a range of breakpoints and values to apply to a property
 */
@mixin property-scale( $properties, $breakpoint-scale, $min-max: "min", $axis: "width" ) {
  @if type-of( $properties ) != list {
    $properties: ($properties);
  }

  @each $breakpoint-value, $scale-value in $breakpoint-scale {
    @if $breakpoint-value == 0 {
      @each $property in $properties {
        #{ $property }: map-get($breakpoint-scale, $breakpoint-value);
      }
    } @else {
      @media (#{ $min-max }-#{ $axis }: $breakpoint-value) {
        @each $property in $properties {
          #{ $property }: map-get($breakpoint-scale, $breakpoint-value);
        }
      }
    }
  }
}

/*
 * FLUID PROPERTY
 * Generate the series of media queries to use a viewport-relative fluid value
 */
@mixin fluid-property($properties, $min, $max, $vmin, $vmax, $dimension: width) {
  $vbase: 100vw;
  @if $dimension==height {
    $vbase: 100vh;
  }
  @each $property in $properties {
    #{$property}: $min;
  }
  @media (min-#{$dimension}: $vmin) {
    @each $property in $properties {
      #{$property}: calc(#{$min} + #{strip-unit($max - $min)} * (#{$vbase} - #{$vmin}) / #{strip-unit($vmax - $vmin)});
    }
  }
  @media (min-#{$dimension}: $vmax) {
    @each $property in $properties {
      #{$property}: $max;
    }
  }
}

/**
 * WATERMARK
 * Adds a pseudo-element with the grip pattern watermark
 */
@mixin watermark($color: #000, $alignment: right, $pin: top, $element: before) {
  position: relative;

  &::#{$element} {
    content: "";
    position: absolute;
    #{$pin}: 0;
    #{$alignment}: 5%;
    width: 18.375rem;
    height: 22.5rem;
    background: url(svg-background($svg-grip-pattern, rgba($color, 0.1))) no-repeat;
    background-size: 100% auto;

    @if $pin == top {
      background-position: bottom center;
    }

    @if $pin == bottom {
      background-position: top center;
    }
  }
}

@mixin section-padding($dimension: horizontal) {
  $properties: ();

  @if $dimension == horizontal {
    $properties: (padding-left, padding-right);
  } @else if $dimension == vertical {
    $properties: (padding-top, padding-bottom);
  } @else {
    $properties: (padding-#{$dimension});
  }

  @each $property in $properties {
    #{$property}: section-padding-value($dimension);
  }
}


// -----------------------------------------------------------------------------
//! Simple media queries
// -----------------------------------------------------------------------------

@mixin min( $breakpoint ) {
    @media print, screen and ( min-width: $breakpoint ) {
        @content;
    }
}

@mixin max( $breakpoint ) {
    $breakpoint: $breakpoint - 1;
    @media screen and ( max-width: $breakpoint ) {
        @content;
    }
}

@mixin range( $start, $end ) {
    $end: $end - 1;
    @media screen and ( min-width: $start ) and ( max-width: $end ) {
        @content;
    }
}

// -----------------------------------------------------------------------------
//! EASY MEDIA QUERIES
// -----------------------------------------------------------------------------

	@mixin respond($breakpoint, $operator: "up", $dimension: 'width') {

		@if $operator == "up"
		{
			@media print, screen and ( min-#{ $dimension }: $breakpoint) {
				@content;
			}
		} @else if $operator == "down" {
			@if unit( $breakpoint ) == "px" {
				$breakpoint: $breakpoint - 1;
			}
			@media screen and (max-#{ $dimension }: $breakpoint) {
				@content;
			}
		} @else  {
			@if unit( $operator ) == "px" {
				$operator: $operator - 1;
			}
			@media screen and (min-#{ $dimension }: $breakpoint) and (max-#{ $dimension }: $operator) {
				@content;
			}
		}

	}


// -----------------------------------------------------------------------------
//! RESETS
// -----------------------------------------------------------------------------

	@mixin unlist {
		margin: 0;
		padding: 0;
		list-style: none;

		li {
			list-style: inherit;
		}

		ul, ol {
			margin: 0;
			padding: 0;
		}
	}

	@mixin list-reset( $with-children: false ) {
		list-style: none;
		margin: 0;
		padding: 0;

		li {
			list-style: inherit;
		}

		@if( $with-children ) {
			ul,
			ol {
				margin: 0;
				padding: 0;
			}
		}
	}


	// @mixin clearfix {
	// 	&:before, &:after { content: " "; display: table; }
	// 	&:after { clear: both; }
	// }


// -----------------------------------------------------------------------------
//! PLACEHOLDER COLORS
// -----------------------------------------------------------------------------

	@mixin input-placeholder() {
		&.placeholder {
			@content;
		}
		&:-moz-placeholder {
			@content;
		}
		&::-moz-placeholder {
			@content;
		}
		&::-webkit-input-placeholder {
			@content;
		}
	}

