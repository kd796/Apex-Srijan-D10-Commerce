<?php

/**
 * @file
 * Functions to support theming in the ecom theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

// Including all the preprocesses.
include_once 'preprocess/node.preprocess.php';

/**
 * Implements hook_form_FORM_ID_alter() for search_form.
 */
function ecom_form_alter(&$form, &$form_state, &$form_id) {
  if (in_array($form_id, ['search_block_form'])) {
    $form['keys']['#attributes']['placeholder'] = t('Search');
  }
}

/**
 * Implements hook alter on the new products filter form.
 */
function ecom_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');

  if ($view['view']->id() == 'new_products') {
    foreach ($form['category']['#options'] as $key => $v) {
      $parent = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($key);
      if (!empty($parent)) {
        unset($form['category']['#options'][$key]);
      }
    }
  }
}

/**
 * Prepares variables for shipment templates.
 *
 * Default template: commerce-shipment.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function ecom_preprocess_commerce_shipment(array &$variables) {
  /** @var Drupal\commerce_shipping\Entity\ShipmentInterface $shipment */
  $shipment = $variables['elements']['#commerce_shipment'];

  $variables['shipment_entity'] = $shipment;
  $variables['shipment'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    if ($key == 'shipping_method') {
      $currency_formatter = \Drupal::service('commerce_price.currency_formatter');
      /** @var \Drupal\commerce_price\Price $shipment->getAmount() */
      $formatted_price = $currency_formatter->format($shipment->getAmount()->getNumber(), $shipment->getAmount()->getCurrencyCode());

      $price_output = t('@amount', [
        '@amount' => $formatted_price,
      ]);
      $variables['price_output'] = $price_output;
    }
    $variables['shipment'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function ecom_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for taxonomy term templates.
 */
function ecom_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $view_mode;
}
