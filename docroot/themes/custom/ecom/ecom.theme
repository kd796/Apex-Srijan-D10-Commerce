<?php

/**
 * @file
 * Functions to support theming in the ecom theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

// Including all the preprocesses.
include_once 'preprocess/node.preprocess.php';

/**
 * Implements hook_form_FORM_ID_alter() for search_form.
 */
function ecom_form_alter(&$form, &$form_state, &$form_id) {
  if (in_array($form_id, ['search_block_form'])) {
    $form['keys']['#attributes']['placeholder'] = t('Search');
  }
}

/**
 * Implements hook alter on the new products filter form.
 */
function ecom_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');

  if ($view['view']->id() == 'new_products') {
    foreach ($form['category']['#options'] as $key => $v) {
      $parent = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($key);
      if (!empty($parent)) {
        unset($form['category']['#options'][$key]);
      }
    }
  }
}

/**
 * Prepares variables for shipment templates.
 *
 * Default template: commerce-shipment.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function ecom_preprocess_commerce_shipment(array &$variables) {
  /** @var Drupal\commerce_shipping\Entity\ShipmentInterface $shipment */
  $shipment = $variables['elements']['#commerce_shipment'];

  $variables['shipment_entity'] = $shipment;
  $variables['shipment'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    if ($key == 'shipping_method') {
      $currency_formatter = \Drupal::service('commerce_price.currency_formatter');
      /** @var \Drupal\commerce_price\Price $shipment->getAmount() */
      $formatted_price = $currency_formatter->format($shipment->getAmount()->getNumber(), $shipment->getAmount()->getCurrencyCode());

      $price_output = t('@amount', [
        '@amount' => $formatted_price,
      ]);
      $variables['price_output'] = $price_output;
    }
    $variables['shipment'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_preprocess_HOOK() for commerce_checkout_order_summary.
 */
function ecom_preprocess_commerce_checkout_order_summary(&$variables) {
  /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['order_entity'];

  // Get the order items.
  $order_items = $order->getItems();

  $product_titles = [];

  foreach ($order_items as $order_item) {
    // Get the title of each order item.
    $order_item_title = $order_item->getTitle();

    // Load the node by title.
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    $nodes = $node_storage->loadByProperties([
      'title' => $order_item_title,
    ]);

    if ($node = reset($nodes)) {
      // Get the value of the 'field_long_description' field from the node.
      $product_title = $node->get('field_long_description')->value;
      $product_titles[] = $product_title;
    }
  }
  // Set the product titles in the variables array.
  $variables['product_titles'] = $product_titles;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function ecom_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for taxonomy term templates.
 */
function ecom_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $view_mode;
}

/**
 * Implements hook_preprocess_hook()
 */
function ecom_preprocess_block(&$vars) {
  if ($vars['plugin_id'] == "facet_block:brand") {
    facet_block_brand_logo_alter($vars);
  }
  if ($vars['plugin_id'] == "facet_block:brand_name") {
    $facet = &$vars['content'][0]['#facet'];
    $active_items = $facet->getActiveItems();
    if ($active_items) {
      $active_item = $active_items[array_key_first($active_items)];
      if ($active_item) {
        $url_options = $vars['content'][0]['#items'][$active_item]['#url']->getOptions();
        if (isset($url_options['query']['f'])) {
          foreach ($url_options['query']['f'] as $key => $query) {
            if ($query == 'brand:' . $active_item) {
              unset($url_options['query']['f'][$key]);
            }
          }
        }
        $vars['content'][0]['#items'][$active_item]['#url']->setOptions($url_options);
      }
    }
  }
}

/**
 * Facet brand block alter.
 */
function facet_block_brand_logo_alter(&$vars) {
  if (isset($vars['content'][0]['field_brand'])) {
    $t‌​erms = [];
    $facet_filter_url = [];
    foreach ($vars['content'][0]['field_brand'] as $facet_brand) {
      $t‌​erms[] = $facet_brand['raw_value'];
      $facet_filter_url[$facet_brand['raw_value']] = $facet_brand['url'];
    }
    $brands = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadMultiple($t‌​erms);
    foreach ($brands as $term) {
      $brand_logo_field = !$term->get('field_brand_logo')->isEmpty() ?
      $term->get('field_brand_logo')->entity : '';
      if ($brand_logo_field && $brand_logo_field->hasField('field_media_image')) {
        $media_output = '';
        $media_render = \Drupal::entityTypeManager()->getViewBuilder('media')->view($brand_logo_field, 'full');
        $media_output = \Drupal::service('renderer')->renderRoot($media_render);
      }
      // Logic to sync facet Brands filter with Brand name filter starts.
      $request = \Drupal::request();
      $current_url = $request->getUri();
      $uri = parse_url($current_url);
      parse_str($uri['query'], $query_parameters);

      $facet_url = $facet_filter_url[$term->id()];
      $facet_uri = parse_url($facet_url);
      parse_str($facet_uri['query'], $facet_query_parameters);

      if (isset($facet_query_parameters['f'])) {
        $facet_query_params = [];
        foreach ($facet_query_parameters['f'] as $parameter_name => $parameter_value) {
          $parts = explode(':', $parameter_value);
          if (count($parts) === 2) {
            $param_facet_name = $parts[0];
            if (in_array($param_facet_name, ['brand_name', 'brand'])) {
              $facet_query_params[$param_facet_name] = $parameter_name;
            }
          }
        }
        if (isset($facet_query_params['brand_name'])) {
          if (!isset($facet_query_params['brand'])) {
            unset($facet_query_parameters['f'][$facet_query_params['brand_name']]);
          }
          else {
            foreach ($query_parameters['f'] as $query) {
              if (substr($query, 0, strlen('brand:')) === 'brand:' &&
                $query === $facet_query_parameters['f'][$facet_query_params['brand']]) {
                unset($facet_query_parameters['f'][$facet_query_params['brand']]);
              }
              if (substr($query, 0, strlen('brand_name')) === 'brand_name' &&
                $query === $facet_query_parameters['f'][$facet_query_params['brand_name']]) {
                unset($facet_query_parameters['f'][$facet_query_params['brand_name']]);
                unset($facet_query_parameters['f'][$facet_query_params['brand']]);
              }
            }
          }

          $new_query = http_build_query($facet_query_parameters);
          $new_url = $uri['scheme'] . '://' . $uri['host'] . $uri['path'];
          if (!empty($new_query)) {
            $new_url .= '?' . $new_query;
          }
          $facet_filter_url[$term->id()] = $new_url;
        }
      }
      // Below code update brand filter with same brand_name.
      if (strpos($facet_filter_url[$term->id()], 'brand_name') === FALSE &&
        strpos($facet_filter_url[$term->id()], 'brand%3A') > 0) {
        $count = isset($query_parameters['f']) ? count($query_parameters['f']) : 1;
        $facet_filter_url[$term->id()] = $facet_filter_url[$term->id()] . '&f%5B' .
        $count . '%5D=brand_name%3A' . (int) $term->id();
      }

      // Empty brand-name filter, If brand filter is empty but brand_name is not.
      $vars['brands'][] = [
        'brand_logo' => $media_output,
        'id' => $term->id(),
        'name' => $term->getName(),
        'url' => $facet_filter_url[$term->id()],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_hook.
 */
function ecom_preprocess_node(&$variables) {
  if (isset($variables['view_mode']) && $variables['view_mode'] == "search_index") {
    _product_search_index_view_mode($variables);
  }
}

/**
 * Customized Product's search_index view mode.
 */
function _product_search_index_view_mode(&$variables) {
  $product = $variables['elements']['#node'];
  $commerce_product = $product->get('field_commerce_product')->entity;
  $commerce_product_variation = $commerce_product->get('variations')->entity;
  $commerce_product_price = $commerce_product_variation->getPrice();
  $currency_formatter = \Drupal::service('commerce_price.currency_formatter');
  $variables['price'] = $currency_formatter->format($commerce_product_price->getNumber(),
    $commerce_product_price->getCurrencyCode());
  $variables['stock'] = $commerce_product_variation->get('field_stock')->value;
}
